{
    "swagger": "2.0",
    "info": {
    "description": "Complete recipe project where you can: 1) create users, 2) add recipes, 3) filter recipes with the ingredients available to the user, there is also swagger-type documentation, testing, etc. This project is deployed with the following url https://cruz-recipes.onrender.com",
    "version": "1.0.0",
    "title": "recetario sequelize",
    "termsOfService": "http://swagger.io/terms/",
    "contact": {
    "email": "cruzmaldonadocharris@gmail.com.com"
    },
    "license": {
    "name": "Apache 2.0",
    "url": "http://www.apache.org/licenses/LICENSE-2.0.html"
    }
    },
    "host": "https://cruz-recipes.onrender.com",
    "basePath": "/api/v1",
    "tags": [
    {
    "name": "auth",
    "description": "path to register and log in users",
    "externalDocs": {
    "description": "Find out more about our API",
    "url": "http://swagger.io"
    }
    },
    {
    "name": "users",
    "description": "Operations about users",
    "externalDocs": {
    "description": "Find out more about our API",
    "url": "http://swagger.io"
    }
    },
    {
    "name": "categories",
    "description": "information about the categories that can have a recipe",
    "externalDocs": {
    "description": "Find out more about our API",
    "url": "http://swagger.io"
    }
    },
    {
    "name": "recipes",
    "description": "information about the recipes a user has",
    "externalDocs": {
    "description": "Find out more about our API",
    "url": "http://swagger.io"
    }
    },
    {
    "name": "ingredients",
    "description": "information about the ingredients that a user has",
    "externalDocs": {
    "description": "Find out more about our API",
    "url": "http://swagger.io"
    }
    },
    {
    "name": "instructions",
    "description": "list of instructions to make a recipe",
    "externalDocs": {
    "description": "Find out more about our API",
    "url": "http://swagger.io"
    }
    },
    {
    "name": "pet",
    "description": "Everything about your Pets",
    "externalDocs": {
    "description": "Find out more",
    "url": "http://swagger.io"
    }
    },
    {
    "name": "store",
    "description": "Access to Petstore orders"
    },
    {
    "name": "user",
    "description": "Operations about user",
    "externalDocs": {
    "description": "Find out more about our API",
    "url": "http://swagger.io"
    }
    }
    ],
    "schemes": [
    "https"
    ],
    "paths": {
    "/users":{
    "get":{
    "tags":["users"],
    "summary":"get all registered users"
    }
    },
    "/users/me":{
    "get":{
    "tags":["users"],
    "summary":"get information about the logged in user"
    },
    "patch":{
    "tags":["users"],
    "summary":"Modify information of the logged in user"
    },
    "delete":{
    "tags":["users"],
    "summary":"delete the logged user"
    }
    },
    "/users/{id}":{
    "get":{
    "tags":["users"],
    "summary":"get user by id"
    },
    "patch":{
    "tags":["users"],
    "summary":"Modify user information by id, only admin"
    },
    "delete":{
    "tags":["users"],
    "summary":"delete user information by id, only admin"
    }
    },
    "/users/me/my_recipes":{
    "get":{
    "tags":["users"],
    "summary":"get only the recipes that I can make the user"
    }
    },
    "/auth/register":{
    "post":{
    "tags":["auth"],
    "summary":"register a new user",
    "description":"",
    "operationId":"createUser",
    "consumes":["multipart/form-data"],
    "produces":["application/json"],
    "parameters":[
    {
    "name":"firstName",
    "in":"formData",
    "description":"first username",
    "required":true,
    "type":"string"
    },
    {
    "name":"lastName",
    "in":"formData",
    "description":"last username",
    "required":true,
    "type":"string"
    },
    {
    "name":"email",
    "in":"formData",
    "description":"example@example.com",
    "required":true,
    "type":"string"
    },
    {
    "name":"password",
    "in":"formData",
    "description":"password",
    "required":true,
    "type":"string"
    },
    {
    "name":"phone",
    "in":"formData",
    "description":"+521231231231",
    "required":true,
    "type":"string"},
    {
    "name":"birthday",
    "in":"formData",
    "description":"YYYY/MM/DD",
    "required":true,
    "type":"string"}  
    ],
    "responses":{
    "201":{
    "description":"user created",
    "schema":{
    "$ref":"#/definitions/Users"
    }
    },
    "400":{
    "description":"{err.mesage} or 'All field must be completed'",
    "schema":{
    "$ref":"#/definitions/400CreateUsers"
    }
    }
    },
    "security":[
    {
    }
    ]
    }
    },
    "/auth/login":{
    "post":{
    "tags":["auth"],
    "summary":"login user"
    }
    },
    "/categories":{
    "get":{
    "tags":["categories"],
    "summary":"get all categories"
    },
    "post":{
    "tags":["categories"],
    "summary":"Create a new categorie,only admin"
    }
    },
    "/categories/{id}":{
    "get":{
    "tags":["categories"],
    "summary":"get categorie by id"
    },
    "delete":{
    "tags":["categories"],
    "summary":"delete categorie by id, only admin"
    }
    },
    "/recipes":{
    "get":{
    "tags":["recipes"],
    "summary":"show all the recipes in the DB"
    },
    "post":{
    "tags":["recipes"],
    "summary":"create a new recipe,protected by user"
    }
    },
    "/recipes/{recipe_id}":{
    "get":{
    "tags":["recipes"],
    "summary":"get recipe by id,protected by user."
    },
    "patch":{
    "tags":["recipes"],
    "summary":"update a recipe by id,protected by user"
    },
    "delete":{
    "tags":["recipes"],
    "summary":"delete recipe by id,protected by user"
    } 
    },
    "/ingredients":{
    "get":{
    "tags":["ingredients"],
    "summary":"get all the ingredients that a recipe has"
    },
    "post":{
    "tags":["ingredients"],
    "summary":"create a new ingredient, only admin"
    }
    },
    "/ingredients/{ingredient_id}":{
    "get":{
    "tags":["ingredients"],
    "summary":"Get ingredient by id"
    },
    "patch":{
    "tags":["ingredients"],
    "summary":"update an ingredient by id,only admin"
    },
    "delete":{
    "tags":["ingredients"],
    "summary":"delete an ingredient by id,only admin"
    }
    },
    "/ingredients/{ingredient_id}/add_to_user":{
    "post":{
    "tags":["ingredients"],
    "summary":"add an ingredient from the DB to those available by a user"
    }
    },
    "/instructions":{
    "get":{
    "tags":["instructions"],
    "summary":"get all the instructions that a recipe has"
    },
    "post":{
    "tags":["instructions"],
    "summary":"add instruction to a recipe"
    }    
    },
    "/instructions/{instruction_id}":{
    "get":{
    "tags":["instructions"],
    "summary":"get a intruction by id"
    },
    "patch":{
    "tags":["instructions"],
    "summary":"update a instruction by id,protected by user"
    },
    "delete":{
    "tags":["instructions"],
    "summary":"delete an instruction by id,protected by user"
    }
    },
    "/pet/{petId}/uploadImage": {
    "post": {
    "tags": [
    "pet"
    ],
    "summary": "uploads an image",
    "description": "",
    "operationId": "uploadFile",
    "consumes": [
    "multipart/form-data"
    ],
    "produces": [
    "application/json"
    ],
    "parameters": [
    {
    "name": "petId",
    "in": "path",
    "description": "ID of pet to update",
    "required": true,
    "type": "integer",
    "format": "int64"
    },
    {
    "name": "additionalMetadata",
    "in": "formData",
    "description": "Additional data to pass to server",
    "required": false,
    "type": "string"
    },
    {
    "name": "file",
    "in": "formData",
    "description": "file to upload",
    "required": false,
    "type": "file"
    }
    ],
    "responses": {
    "200": {
    "description": "successful operation",
    "schema": {
    "$ref": "#/definitions/ApiResponse"
    }
    }
    },
    "security": [
    {
    "petstore_auth": [
    "write:pets",
    "read:pets"
    ]
    }
    ]
    }
    },
    "/pet": {
    "post": {
    "tags": [
    "pet"
    ],
    "summary": "Add a new pet to the store",
    "description": "",
    "operationId": "addPet",
    "consumes": [
    "application/json",
    "application/xml"
    ],
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "in": "body",
    "name": "body",
    "description": "Pet object that needs to be added to the store",
    "required": true,
    "schema": {
    "$ref": "#/definitions/Pet"
    }
    }
    ],
    "responses": {
    "405": {
    "description": "Invalid input"
    }
    },
    "security": [
    {
    "petstore_auth": [
    "write:pets",
    "read:pets"
    ]
    }
    ]
    },
    "put": {
    "tags": [
    "pet"
    ],
    "summary": "Update an existing pet",
    "description": "",
    "operationId": "updatePet",
    "consumes": [
    "application/json",
    "application/xml"
    ],
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "in": "body",
    "name": "body",
    "description": "Pet object that needs to be added to the store",
    "required": true,
    "schema": {
    "$ref": "#/definitions/Pet"
    }
    }
    ],
    "responses": {
    "400": {
    "description": "Invalid ID supplied"
    },
    "404": {
    "description": "Pet not found"
    },
    "405": {
    "description": "Validation exception"
    }
    },
    "security": [
    {
    "petstore_auth": [
    "write:pets",
    "read:pets"
    ]
    }
    ]
    }
    },
    "/pet/findByStatus": {
    "get": {
    "tags": [
    "pet"
    ],
    "summary": "Finds Pets by status",
    "description": "Multiple status values can be provided with comma separated strings",
    "operationId": "findPetsByStatus",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "status",
    "in": "query",
    "description": "Status values that need to be considered for filter",
    "required": true,
    "type": "array",
    "items": {
    "type": "string",
    "enum": [
    "available",
    "pending",
    "sold"
    ],
    "default": "available"
    },
    "collectionFormat": "multi"
    }
    ],
    "responses": {
    "200": {
    "description": "successful operation",
    "schema": {
    "type": "array",
    "items": {
    "$ref": "#/definitions/Pet"
    }
    }
    },
    "400": {
    "description": "Invalid status value"
    }
    },
    "security": [
    {
    "petstore_auth": [
    "write:pets",
    "read:pets"
    ]
    }
    ]
    }
    },
    "/pet/findByTags": {
    "get": {
    "tags": [
    "pet"
    ],
    "summary": "Finds Pets by tags",
    "description": "Multiple tags can be provided with comma separated strings. Use tag1, tag2, tag3 for testing.",
    "operationId": "findPetsByTags",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "tags",
    "in": "query",
    "description": "Tags to filter by",
    "required": true,
    "type": "array",
    "items": {
    "type": "string"
    },
    "collectionFormat": "multi"
    }
    ],
    "responses": {
    "200": {
    "description": "successful operation",
    "schema": {
    "type": "array",
    "items": {
    "$ref": "#/definitions/Pet"
    }
    }
    },
    "400": {
    "description": "Invalid tag value"
    }
    },
    "security": [
    {
    "petstore_auth": [
    "write:pets",
    "read:pets"
    ]
    }
    ],
    "deprecated": true
    }
    },
    "/pet/{petId}": {
    "get": {
    "tags": [
    "pet"
    ],
    "summary": "Find pet by ID",
    "description": "Returns a single pet",
    "operationId": "getPetById",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "petId",
    "in": "path",
    "description": "ID of pet to return",
    "required": true,
    "type": "integer",
    "format": "int64"
    }
    ],
    "responses": {
    "200": {
    "description": "successful operation",
    "schema": {
    "$ref": "#/definitions/Pet"
    }
    },
    "400": {
    "description": "Invalid ID supplied"
    },
    "404": {
    "description": "Pet not found"
    }
    },
    "security": [
    {
    "api_key": []
    }
    ]
    },
    "post": {
    "tags": [
    "pet"
    ],
    "summary": "Updates a pet in the store with form data",
    "description": "",
    "operationId": "updatePetWithForm",
    "consumes": [
    "application/x-www-form-urlencoded"
    ],
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "petId",
    "in": "path",
    "description": "ID of pet that needs to be updated",
    "required": true,
    "type": "integer",
    "format": "int64"
    },
    {
    "name": "name",
    "in": "formData",
    "description": "Updated name of the pet",
    "required": false,
    "type": "string"
    },
    {
    "name": "status",
    "in": "formData",
    "description": "Updated status of the pet",
    "required": false,
    "type": "string"
    }
    ],
    "responses": {
    "405": {
    "description": "Invalid input"
    }
    },
    "security": [
    {
    "petstore_auth": [
    "write:pets",
    "read:pets"
    ]
    }
    ]
    },
    "delete": {
    "tags": [
    "pet"
    ],
    "summary": "Deletes a pet",
    "description": "",
    "operationId": "deletePet",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "api_key",
    "in": "header",
    "required": false,
    "type": "string"
    },
    {
    "name": "petId",
    "in": "path",
    "description": "Pet id to delete",
    "required": true,
    "type": "integer",
    "format": "int64"
    }
    ],
    "responses": {
    "400": {
    "description": "Invalid ID supplied"
    },
    "404": {
    "description": "Pet not found"
    }
    },
    "security": [
    {
    "petstore_auth": [
    "write:pets",
    "read:pets"
    ]
    }
    ]
    }
    },
    "/store/order": {
    "post": {
    "tags": [
    "store"
    ],
    "summary": "Place an order for a pet",
    "description": "",
    "operationId": "placeOrder",
    "consumes": [
    "application/json"
    ],
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "in": "body",
    "name": "body",
    "description": "order placed for purchasing the pet",
    "required": true,
    "schema": {
    "$ref": "#/definitions/Order"
    }
    }
    ],
    "responses": {
    "200": {
    "description": "successful operation",
    "schema": {
    "$ref": "#/definitions/Order"
    }
    },
    "400": {
    "description": "Invalid Order"
    }
    }
    }
    },
    "/store/order/{orderId}": {
    "get": {
    "tags": [
    "store"
    ],
    "summary": "Find purchase order by ID",
    "description": "For valid response try integer IDs with value >= 1 and <= 10. Other values will generated exceptions",
    "operationId": "getOrderById",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "orderId",
    "in": "path",
    "description": "ID of pet that needs to be fetched",
    "required": true,
    "type": "integer",
    "maximum": 10,
    "minimum": 1,
    "format": "int64"
    }
    ],
    "responses": {
    "200": {
    "description": "successful operation",
    "schema": {
    "$ref": "#/definitions/Order"
    }
    },
    "400": {
    "description": "Invalid ID supplied"
    },
    "404": {
    "description": "Order not found"
    }
    }
    },
    "delete": {
    "tags": [
    "store"
    ],
    "summary": "Delete purchase order by ID",
    "description": "For valid response try integer IDs with positive integer value. Negative or non-integer values will generate API errors",
    "operationId": "deleteOrder",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "orderId",
    "in": "path",
    "description": "ID of the order that needs to be deleted",
    "required": true,
    "type": "integer",
    "minimum": 1,
    "format": "int64"
    }
    ],
    "responses": {
    "400": {
    "description": "Invalid ID supplied"
    },
    "404": {
    "description": "Order not found"
    }
    }
    }
    },
    "/store/inventory": {
    "get": {
    "tags": [
    "store"
    ],
    "summary": "Returns pet inventories by status",
    "description": "Returns a map of status codes to quantities",
    "operationId": "getInventory",
    "produces": [
    "application/json"
    ],
    "parameters": [],
    "responses": {
    "200": {
    "description": "successful operation",
    "schema": {
    "type": "object",
    "additionalProperties": {
    "type": "integer",
    "format": "int32"
    }
    }
    }
    },
    "security": [
    {
    "api_key": []
    }
    ]
    }
    },
    "/user/{username}": {
    "get": {
    "tags": [
    "user"
    ],
    "summary": "Get user by user name",
    "description": "",
    "operationId": "getUserByName",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "username",
    "in": "path",
    "description": "The name that needs to be fetched. Use user1 for testing. ",
    "required": true,
    "type": "string"
    }
    ],
    "responses": {
    "200": {
    "description": "successful operation",
    "schema": {
    "$ref": "#/definitions/User"
    }
    },
    "400": {
    "description": "Invalid username supplied"
    },
    "404": {
    "description": "User not found"
    }
    }
    },
    "put": {
    "tags": [
    "user"
    ],
    "summary": "Updated user",
    "description": "This can only be done by the logged in user.",
    "operationId": "updateUser",
    "consumes": [
    "application/json"
    ],
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "username",
    "in": "path",
    "description": "name that need to be updated",
    "required": true,
    "type": "string"
    },
    {
    "in": "body",
    "name": "body",
    "description": "Updated user object",
    "required": true,
    "schema": {
    "$ref": "#/definitions/User"
    }
    }
    ],
    "responses": {
    "400": {
    "description": "Invalid user supplied"
    },
    "404": {
    "description": "User not found"
    }
    }
    },
    "delete": {
    "tags": [
    "user"
    ],
    "summary": "Delete user",
    "description": "This can only be done by the logged in user.",
    "operationId": "deleteUser",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "username",
    "in": "path",
    "description": "The name that needs to be deleted",
    "required": true,
    "type": "string"
    }
    ],
    "responses": {
    "400": {
    "description": "Invalid username supplied"
    },
    "404": {
    "description": "User not found"
    }
    }
    }
    },
    "/user/login": {
    "get": {
    "tags": [
    "user"
    ],
    "summary": "Logs user into the system",
    "description": "",
    "operationId": "loginUser",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "name": "username",
    "in": "query",
    "description": "The user name for login",
    "required": true,
    "type": "string"
    },
    {
    "name": "password",
    "in": "query",
    "description": "The password for login in clear text",
    "required": true,
    "type": "string"
    }
    ],
    "responses": {
    "200": {
    "description": "successful operation",
    "headers": {
    "X-Expires-After": {
    "type": "string",
    "format": "date-time",
    "description": "date in UTC when token expires"
    },
    "X-Rate-Limit": {
    "type": "integer",
    "format": "int32",
    "description": "calls per hour allowed by the user"
    }
    },
    "schema": {
    "type": "string"
    }
    },
    "400": {
    "description": "Invalid username/password supplied"
    }
    }
    }
    },
    "/user/logout": {
    "get": {
    "tags": [
    "user"
    ],
    "summary": "Logs out current logged in user session",
    "description": "",
    "operationId": "logoutUser",
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [],
    "responses": {
    "default": {
    "description": "successful operation"
    }
    }
    }
    },
    "/user/createWithArray": {
    "post": {
    "tags": [
    "user"
    ],
    "summary": "Creates list of users with given input array",
    "description": "",
    "operationId": "createUsersWithArrayInput",
    "consumes": [
    "application/json"
    ],
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "in": "body",
    "name": "body",
    "description": "List of user object",
    "required": true,
    "schema": {
    "type": "array",
    "items": {
    "$ref": "#/definitions/User"
    }
    }
    }
    ],
    "responses": {
    "default": {
    "description": "successful operation"
    }
    }
    }
    },
    "/user/createWithList": {
    "post": {
    "tags": [
    "user"
    ],
    "summary": "Creates list of users with given input array",
    "description": "",
    "operationId": "createUsersWithListInput",
    "consumes": [
    "application/json"
    ],
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "in": "body",
    "name": "body",
    "description": "List of user object",
    "required": true,
    "schema": {
    "type": "array",
    "items": {
    "$ref": "#/definitions/User"
    }
    }
    }
    ],
    "responses": {
    "default": {
    "description": "successful operation"
    }
    }
    }
    },
    "/user": {
    "post": {
    "tags": [
    "user"
    ],
    "summary": "Create user",
    "description": "This can only be done by the logged in user.",
    "operationId": "createUser",
    "consumes": [
    "application/json"
    ],
    "produces": [
    "application/json",
    "application/xml"
    ],
    "parameters": [
    {
    "in": "body",
    "name": "body",
    "description": "Created user object",
    "required": true,
    "schema": {
    "$ref": "#/definitions/User"
    }
    }
    ],
    "responses": {
    "default": {
    "description": "successful operation"
    }
    }
    }
    }
    },
    "securityDefinitions": {
    "api_key": {
    "type": "apiKey",
    "name": "api_key",
    "in": "header"
    },
    "petstore_auth": {
    "type": "oauth2",
    "authorizationUrl": "https://petstore.swagger.io/oauth/authorize",
    "flow": "implicit",
    "scopes": {
    "read:pets": "read your pets",
    "write:pets": "modify pets in your account"
    }
    }
    },
    "definitions": {
    "Users":{
    "type":"object",
    "properties":{
    "id":{
    "type":"string",
    "format":"uuid"
    },
    "firstName":{
    "type": "string"
    },
    "lastName":{
    "type": "string"
    },
    "email":{
    "type": "string",
    "format":"email"
    },
    "password":{
    "type": "string",
    "format":"password"
    },
    "phone":{
    "type": "string"
    },
    "birhday":{
    "type": "string",
    "default":"YYYY/MM/DD"
    },
    "gender":{
    "type": "string"
    },
    "role":{
    "type": "string"
    },
    "country":{
    "type": "string"
    },
    "status":{
    "type": "string",
    "default":"active",
    "description":"whether or not the user is active"
    },
    "isVerified":{
    "type":"boolean",
    "default":"false",
    "description":"user verification"
    }
    },
    "xml":{
    "name":"Users"
    }
    },
    "recipes":{
    "type":"object",
    "properties":{
    "id":{
    "type":"string",
    "format":"uuid"
    },
    "title":{
    "type":"string"
    },
    "description":{
    "type":"string"
    },
    "url_img":{
    "type":"string"
    },
    "time":{
    "type":"integer",
    "format":"int64",
    "description":"quantity in minutes that the recipe takes"
    },
    "portions":{
    "type":"integer",
    "format":"int64"
    },
    "user_id":{
    "type":"string",
    "format":"uuid"
    },
    "category_id":{
    "type":"string",
    "format":"uuid"
    },
    "origin":{
    "type":"string",
    "description":"country of origin"
    },
    "likes":{
    "type":"integer",
    "format":"int64"
    }
    },
    "xml":{
    "name":"recipes"
    }
    },
    "instructions":{
    "type":"object",
    "properties":{
    "id":{
    "type":"string",
    "format":"uuid"
    },
    "description":{
    "type":"string"
    },
    "step":{
    "type":"integer",
    "format":"int64"
    },
    "recipe_id":{
    "type":"string",
    "format":"uuid"
    }
    },
    "xml":{
    "name":"instructions"
    }
    },
    "ingredients":{
    "type":"object",
    "properties":{
    "id":{
    "type":"string",
    "format":"uuid"
    },
    "name":{
    "type":"string"
    },
    "type_id":{
    "type":"string",
    "format":"uuid"
    },
    "url_img":{
    "type":"string"
    }
    },
    "xml":{
    "name":"ingredients"
    }
    },
    "types":{
    "type":"object",
    "properties":{
    "id":{
    "type":"string",
    "format":"uuid"
    },
    "name":{
    "type":"string"
    }
    },
    "xml":{
    "name":"types"
    }
    },
    "categories":{
    "type":"object",
    "properties":{
    "id":{
    "type":"string",
    "format":"uuid"
    },
    "name":{
    "type":"string"
    }

    },
    "xml":{
    "name":"categories"
    }
    },
    "users_ingredients":{
    "type":"object",
    "properties":{
    "id":{
    "type":"string",
    "format":"uuid"
    },
    "amount":{
    "type":"string"
    
    },
    "user_id":{
    "type":"string",
    "format":"uuid"
    },
    "ingredient_id":{
    "type":"string",
    "format":"uuid"
    }
    },
    "xml":{
    "name":"users_ingredients"
    }
    },
    "recipes_ingredients":{
    "type":"object",
    "properties":{
    "id":{
    "type":"string",
    "format":"uuid"
    },
    "amount":{
    "type":"string"
    },
    "recipe_id":{
    "type":"string",
    "format":"uuid"
    },
    "ingredient_id":{
    "type":"string",
    "format":"uuid"
    }
    },
    "xml":{
    "name":"recipes_ingredients"
    }
    },
    "users_recipes":{
    "type":"object",
    "properties":{
    "id":{
    "type":"string",
    "format":"uuid"
    },
    "favorite":{
    "type":"boolean",
    "description":"If the recipe is one of the customer's favorites."
    },
    "user_id":{
    "type":"string",
    "format":"uuid"
    },
    "recipe_id":{
    "type":"string",
    "format":"uuid"
    }
    },
    "xml":{
    "name":"users_recipes"
    }
    },
    "400CreateUsers":{
    "type":"object",
    "properties":{
    "firstName":{
    "type": "string"
    },
    "lastName":{
    "type": "string"
    },
    "email":{
    "type": "string",
    "format":"email"
    },
    "password":{
    "type": "string",
    "format":"password"
    },
    "phone":{
    "type": "string"
    },
    "birhday":{
    "type": "string",
    "default":"YYYY/MM/DD"
    }
    },
    "xml":{
    "name":"400CreateUsers"
    }
    }
    },
    "externalDocs": {
    "description": "Find out more about Swagger",
    "url": "http://swagger.io"
    }
    }